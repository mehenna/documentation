# 1. Creating a Spring IoC container 
		There are two ways to create a Spring IoC container:
			1. Bean factory 		=> Spring recommends  in the additional few KBs of memory that the application context consumes are critical.
			2. Application context  => Spring recommends that you use the application context in all scenarios
			
		-> Bean factory is the basis for all Spring IoC functionality
		  |-> bean life cycle and wiring. Application context is basically a superset
		  |	  of Bean factory with the additional functionality.
		  
# 2. Java configuration for the application context
		-> The following example shows how to create a simple Java context configuration:
				@Configuration 
    			class SpringContext {  }
    		-> The key is the @Configuration annotation. This is what defines this as a Spring configuration.
 
 # 3. How does Spring IoC container know where to search for beans?
  	-> We need to tell the Spring IoC container the packages to search for by defining a component scan. 	
  			@Configuration 
   			@ComponentScan(basePackages = { "com.mastering.spring" }) 
    		class SpringContext {}
 # 4. Unit testing with mocks
 	    -> what mocking is ?   =>  Mocking is creating objects that simulate the behavior of real objects. 
 	    							(Unlike stubs, mocks can be dynamically created at runtime).
 	    -> The most popular mocking framework :  Mockito (https://github.com/mockito/mockito/wiki/FAQ)
 	    										 Referance book : Growing Object-Oriented Software, Guided by Tests.

# 5. Dependency injection by types
	   -> There are two types of dependency injections that are used frequently :
	   	    1 . The setter injection
	   	    	  	Actually, in order to use the setter injection, you do not even need to declare a setter method.
	   	    	  	 If you specify @Autowired on the variable, Spring automatically uses the setter injection.
			2.  The constructor injection
	   -> Constructor versus setter injection
	        1. Originally, in XML-based application contexts, we used the constructor injection with mandatory dependencies 
	        	and the setter injection with non-mandatory dependencies.
	   		-> However, an important thing to note is that when we use @Autowired on a field or a method, 
	   			the dependency is required by default. If no candidates are available 
	   			for an @Autowired field, autowiring fails and throws an exception. 
	   			So, the choice is not so clear anymore with Java application contexts.
	       
	       -> Using the setter injection results in the state of the object changing during the creation. 
	       	  For fans of immutable objects, the constructor injection might be the way to go. 
	       	  Using the setter injection might sometimes hide the fact that a class has a lot of dependencies,wherase   
	       	  Using the constructor injection makes it obvious, since the size of the constructor increases.
	   
# 6. Spring bean scopes	 
		-> Spring beans can be created with multiple scopes. The default scope is a singleton.
				Since there is only one instance of a singleton bean, it cannot contain any data that is specific to a request.
		-> The scope can be provided with the @Scope annotation on any spring bean:
		|---------------------------------------------------------------------------------------------|
		|Scope   		|     Use																	  |
		|---------------------------------------------------------------------------------------------|
		|Singleton      |  -> It is important to specify that the Spring singleton 					  |
		|				|	   scope is one object per one Spring container.						  |
		|               |  -> If you have multiple spring containers in a single JVM, 				  |
		|				|   	  then there can be multiple instances of the same bean.	 		  |
		|---------------------------------------------------------------------------------------------|
		|Prototype      | -> A new instance is created every time a bean 							  | 
		|				|	  is requested from the Spring container								  |
		|				|	 Ex :    If a bean contains a state, it is recommended 					  |
		|				|		that you use the prototype scope for it. 							  |
		|---------------------------------------------------------------------------------------------|
		|request        | ->  Available only in Spring web contexts. 								  |
		|				|	  A new instance of bean is created for every HTTP request 				  |
		|				|	 Ex :    Ideal for beans that hold data specific to a single request.	  |
		|---------------------------------------------------------------------------------------------|
		|session        | -> Available only in Spring web contexts. 								  |
		|				|	 A new instance of bean is created for every HTTP session.				  |
		|				|	 Ex :   Permissions in a web application.						 		  |
		|---------------------------------------------------------------------------------------------|
		|Application    | -> Available only in Spring web contexts. 								  |
		|				|		One instance of bean per web application.							  |
		|				|	 Ex :   Application configuration for a specific environment.             | 
		|---------------------------------------------------------------------------------------------|

	 
# 7. The @Autowired annotation in depth   
	   -> When @Autowired is used on a dependency, the application context searches for a matching dependency. 
	   		By default, all dependencies that are autowired are required.
	    	=> Possible results are as follows:
	    		1. One match is found: This is the dependency you are looking for
	    		2. More than one match is found: Autowiring fails
	   			3. No match is found: Autowiring fails
	   			
	   		=> Cases where more than one candidate is found can be resolved in two ways:
	   
	   			1. Use the @Primary annotation to mark one of the candidates as the one to be used	
	   					->  @Primary   is used on a bean
	   			2. Use @Qualifier to further qualify autowiring
	   					-> The @Qualifier annotation can be used to give a reference to a Spring bean.
	   
	   
	   
	   
	   